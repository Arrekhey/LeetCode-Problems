/**
 * @param {number[][]} grid
 * @return {number}
 */
var uniquePathsIII = function(grid) {
    let maxPaths = 0 
    function DFS(rowIndex, columnIndex){
    if(grid[rowIndex][columnIndex]===2){
        maxPaths++
        return 
    }   
    let temp = grid[rowIndex][columnIndex]
    grid[rowIndex][columnIndex] = "x"
    if(rowIndex+1<grid.length && columnIndex>=0 && grid[rowIndex+1][columnIndex]!=-1 && grid[rowIndex+1][columnIndex]!="x")
    {
     DFS(rowIndex+1,columnIndex)
    }
        if(rowIndex>=0 && columnIndex+1<grid[0].length && grid[rowIndex][columnIndex+1]!=-1 && grid[rowIndex][columnIndex+1]!="x")
    {
     DFS(rowIndex,columnIndex+1)
    }
        if(rowIndex-1>=0 && columnIndex>=0 && grid[rowIndex-1][columnIndex]!=-1 && grid[rowIndex-1][columnIndex]!="x")
    {
     DFS(rowIndex-1,columnIndex)
    }
        if(rowIndex>=0 && columnIndex-1>=0 && grid[rowIndex][columnIndex-1]!=-1 && grid[rowIndex][columnIndex-1]!="x")
    {
     DFS(rowIndex,columnIndex-1)
    }
  // grid[rowIndex][columnIndex] = temp
    }
    for (let i=0;i<grid.length;i++){
        for (let j=0;j<grid[0].length;j++){
            if(grid[i][j]===1){
                DFS(i,j)
            }
        }
    }
    return maxPaths
};
