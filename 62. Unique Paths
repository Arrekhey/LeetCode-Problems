//Intuition
DFS Traversal of matrix and Counting the number of ways we are going to reach bottom right cell 
But this solution is TLE


var uniquePaths = function(m, n) {
    let vertexMap = new Map()
    let uniquePaths = 0 
    function DFS(rowIndex,columnIndex){
        if(rowIndex===m-1 && columnIndex===n-1){
            uniquePaths++
        }
        if(rowIndex+1<m && columnIndex>=0){
            DFS(rowIndex+1,columnIndex)
        }
        if(rowIndex>=0 && columnIndex+1<n){
            DFS(rowIndex,columnIndex+1)
        }
    }
    DFS(0,0)
    return uniquePaths
};


//Dynamic Programming Approch 

Space Complexity : O(m*n)
Time Complexity :  O(m*n)

var uniquePaths = function(m, n) {
    let arr = new Array(m).fill(null).map(() => Array(n))
    for (let i=0;i<m;i++){
        arr[i][0] = 1
    }
    for (let j=0;j<n;j++){
        arr[0][j] = 1
    }
    for (let i=1;i<m;i++){
        for (let j=1;j<n;j++){
            arr[i][j] = arr[i-1][j]+arr[i][j-1]
        }
    }
    return arr[m-1][n-1]
};



// TypeScript

function uniquePaths(m: number, n: number): number {
  const arr: number[][] = new Array(m).fill(null).map(() => Array(n))
    for (let i=0;i<m;i++){
        arr[i][0] = 1
    }
    for (let j=0;j<n;j++){
        arr[0][j] = 1
    }
    for (let i=1;i<m;i++){
        for (let j=1;j<n;j++){
            arr[i][j] = arr[i-1][j]+arr[i][j-1]
        }
    }
    return arr[m-1][n-1]
};

//Better Approach


