//Intuition
TIme Complexity : O(height*width)


var uniquePathsWithObstacles = function(obstacleGrid) {
    const height = obstacleGrid.length
    const width = obstacleGrid[0].length
    
    //Base Case : If Bottom right cell is an obstacle we are going to return 0 as there is no way of reaching the bottom right cell
    if(obstacleGrid[height-1][width-1]===1){
        return 0
    }
    
    //We are iterating over the Grid to change the obstacle value to -1 so that while we are computing the value of the DP table value 1(obstacle) is not going to is not accounted for calculation 
    for (let i=0;i<height;i++){
        for (let j=0;j<width;j++){
            if(obstacleGrid[i][j]===1){
                obstacleGrid[i][j] = -1
            }
        }
    }
    
    //Filling First Row values with 1 and if we encounter -1 value we are going to break the loop as ther is no way of reaching to that top row value after obstacle 
    for (let i=0;i<height;i++){
        if(obstacleGrid[i][0]===-1){
            break
        }
        else {
           obstacleGrid[i][0]=1 
        }
    }
    
    //Filling First Column values with 1 and if we encounter a -1 value we are going to break the loop as there is now way fo reaching the left most column after obstacle 
     for (let j=0;j<width;j++){
        if(obstacleGrid[0][j]===-1){
            break
        }
        else {
           obstacleGrid[0][j]=1 
        }
    }
    
    //Iterating over the DP Table and calcualting the DP table 
    for (let i=1;i<height;i++){
        for (let j=1;j<width;j++){
            if(obstacleGrid[i][j]!==-1){
            
            if(obstacleGrid[i-1][j]<0 || obstacleGrid[i][j-1]<0){
                obstacleGrid[i][j] = Math.max(obstacleGrid[i-1][j],obstacleGrid[i][j-1],0)
            }
            else {
               obstacleGrid[i][j] =  obstacleGrid[i-1][j]+obstacleGrid[i][j-1]
            }
            }
        }
    }
return obstacleGrid[height-1][width-1]
};
